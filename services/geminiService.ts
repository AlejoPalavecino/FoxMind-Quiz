import { GoogleGenAI } from "@google/genai";
import { type Area } from "../types";

// üîê SEGURIDAD: La clave de API NUNCA debe estar hardcodeada en el c√≥digo fuente.
// Se debe configurar como una variable de entorno en tu plataforma de despliegue.
// Para desarrollo local, puedes crear un archivo .env y usar una herramienta como Vite o Create React App
// que la cargue autom√°ticamente en `process.env.API_KEY` (o similar, ej: `import.meta.env.VITE_API_KEY`).
const apiKey = process.env.API_KEY;

if (!apiKey) {
    console.warn("API_KEY environment variable not set. Gemini API calls will fail.");
}

const ai = new GoogleGenAI({ apiKey: apiKey || "MISSING_API_KEY" });

export interface PerformanceData {
  totalQuestions: number;
  totalCorrect: number;
  totalTimeSeconds: number;
  byArea: { [key in Area]: { correct: number; total: number } };
  weakestArea: Area | null;
  sessionResults: { area: Area; isCorrect: boolean }[];
}

// üßÆ CONTENIDO ‚Äî üîß EDITABLE: Este es el texto que se mostrar√° si la llamada a la API de Gemini falla.
// Puedes personalizarlo para que se ajuste al tono de tu aplicaci√≥n.
const FALLBACK_FEEDBACK = `
¬°Buen trabajo completando el desaf√≠o!

**Fortalezas:**
- Demostraste una buena capacidad para responder bajo presi√≥n.
- Se nota que tienes conocimientos s√≥lidos en varias de las √°reas evaluadas.

**Sugerencias:**
- Intenta repasar los conceptos b√°sicos del √°rea donde tuviste m√°s dificultades.
- La pr√°ctica constante es clave. ¬°Sigue jugando para mejorar tu velocidad y precisi√≥n!

¬°Sigue as√≠!
`;

/**
 * Genera feedback personalizado para el usuario basado en su desempe√±o en el quiz.
 * @param data - Un objeto con los datos de rendimiento del usuario.
 * @returns Una cadena de texto con el feedback.
 */
export async function getGeminiFeedback(data: PerformanceData): Promise<string> {
    if (!apiKey) {
        return Promise.resolve(FALLBACK_FEEDBACK);
    }

    // üîß EDITABLE: Este es el prompt que se env√≠a a la API de Gemini.
    // üõ†Ô∏è C√ìMO CAMBIAR: Puedes ajustar el tono, la longitud (ej. 100-120 palabras),
    // el idioma, o las instrucciones para que el feedback se adapte mejor a tu p√∫blico.
    const prompt = `
Eres un coach educativo. Redacta un feedback en espa√±ol (entre 120 y 150 palabras), claro y motivador. El tono debe ser amable y profesional, sin rega√±os.

Datos del desempe√±o (JSON):
${JSON.stringify({
    totalQuestions: data.totalQuestions,
    totalCorrect: data.totalCorrect,
    totalTimeSeconds: data.totalTimeSeconds,
    byArea: data.byArea,
    weakestArea: data.weakestArea,
    results: data.sessionResults,
})}

Instrucciones:
- Incluye 2 fortalezas espec√≠ficas basadas en los datos (ej: "Excelente precisi√≥n en Matem√°tica" o "Gran velocidad de respuesta").
- Incluye 2 sugerencias de mejora concretas y accionables.
- Incluye 1 micro-recomendaci√≥n para el √°rea con peor desempe√±o. Si todas las √°reas fueron perfectas, felicita por el dominio general.
- Formatea la respuesta con saltos de l√≠nea para que sea f√°cil de leer.
`;

  try {
    const response = await ai.models.generateContent({
      // üîß EDITABLE: Puedes cambiar el modelo de Gemini por otro que se ajuste a tus necesidades.
      // Por ejemplo, 'gemini-1.5-pro-latest' si necesitas m√°s capacidad de razonamiento.
      model: 'gemini-2.5-flash',
      contents: prompt,
      config: {
        // üîß EDITABLE: Ajusta la 'temperatura' para controlar la creatividad de la respuesta.
        // Un valor m√°s bajo (ej. 0.3) la hace m√°s predecible; un valor m√°s alto (ej. 0.9) la hace m√°s creativa.
        temperature: 0.7,
        topP: 0.95,
      }
    });
    
    const text = response.text;
    if (!text) {
        throw new Error("Empty response from Gemini");
    }
    return text;

  } catch (error) {
    console.error("Gemini API error:", error);
    return FALLBACK_FEEDBACK;
  }
}